/* 
 * Xero Assets API
 *
 * The Assets API exposes fixed asset related functions of the Xero Accounting application and can be used for a variety of purposes such as creating assets, retrieving asset valuations etc.
 *
 * Contact: api@xero.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Xero.NetStandard.OAuth2.Model.Asset
{
    /// <summary>
    /// BookDepreciationSetting
    /// </summary>
    [DataContract]
    public partial class TrackingItem :  IEquatable<TrackingItem>, IValidatableObject
    {
        /// <summary>
        /// The Xero identifier for the Tracking Category that the Asset is for
        /// </summary>
        /// <value>The Xero identifier for the Tracking Category that the Asset is for</value>
        [DataMember(Name = "trackingCategoryID", EmitDefaultValue = false)]
        public Guid? TrackingCategoryID { get; set; }

        /// <summary>
        /// The Xero identifier for the Tracking Item that the Asset is for
        /// </summary>
        /// <value>The Xero identifier for the Tracking Item that the Asset is for</value>
        [DataMember(Name = "trackingItemID", EmitDefaultValue = false)]
        public Guid? TrackingItemID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrackingItem {\n");
            sb.Append("  TrackingCategoryID: ").Append(TrackingCategoryID).Append("\n");
            sb.Append("  TrackingItemID: ").Append(TrackingItemID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BookDepreciationSetting);
        }

        /// <summary>
        /// Returns true if TrackingItem instances are equal
        /// </summary>
        /// <param name="input">Instance of TrackingItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrackingItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TrackingCategoryID == input.TrackingCategoryID ||
                    this.TrackingCategoryID.Equals(input.TrackingCategoryID)
                ) && 
                (
                    this.TrackingItemID == input.TrackingItemID ||
                    this.TrackingItemID.Equals(input.TrackingItemID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TrackingCategoryID != null)
                    hashCode = hashCode * 59 + this.TrackingCategoryID.GetHashCode();
                if (this.TrackingItemID != null)
                    hashCode = hashCode * 59 + this.TrackingItemID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
